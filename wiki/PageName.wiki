#labels Featured,Phase-Deploy,SpamFilter
#pyLongURL.py - Short URL checker tool.

= Introduction =

There are so many spam messages using short url specially in the twitter and facebook.
Since MalwareMustDie members mostly communicate in twitter base these spams are annoying.
MalwareMustDie development team was releasing a simple python tool that can be used internally or by anyone who has the similar issue.

We find this tool is useful since is supporting multiple platform of OS as long the python is installed.

I just finished testing this tool in linux cygwin for the windows, which is the base of this tutorial.


= Details =

* The tool package
{{{
You can download the package in our Google Project in the below URL:
Project Link: http://code.google.com/p/malwaremustdie/downloads/detail?name=pyLongURL.zip
}}}

= Howto =

* The files..


You will need to make sure the file is put these 2(two files)
included into your shell path as per follows:
{{{
bash-2.02$ ls -alF py*

-rwx------   1 xxxx xxxx  721 Jan 12 04:10 pyLongURL.py*
-rwx------   1 xxxx xxxx  488 Jan 12 04:12 pyRedirector.py*

bash-2.02$ md5 py*

  :
Filename               MD5 sum
-------------------------------------------------------
pyLongURL.py           96f15ba71acfc4442385760b5bbf1cdc
pyRedirector.py        b09ef1f94ff061eccaf52d682b0c4be7
}}}

* A test run..

This tool is a python script required the below module to run:
{{{
import urllib2, httplib, os, sys, pyRedirector
}}}
To start using the tool you'll need to run it with python, via pyLongURL.py, just execute the command as per below:
{{{
$ python pyLongURL.py
}}}
The output will be like below:
{{{
=================================================
pyLongURL v0.1
=================================================
Usage: pyLongURL.py <short_URL>

Please enter need an URL!

bash-2.02$
}}}
If the screen shows as per above it means the tool was installed well.
So let's put the long URL in the comand line, let's use the long url -
like: http://bit.ly/X0V09A , as per sample below:
{{{
bash-2.02$ python pyLongURL.py http://bit.ly/X0V09A
=================================================
pyLongURL v0.1
=================================================
connect: (bit.ly, 80)
send: 'GET /X0V09A HTTP/1.0\r\nHost: bit.ly\r\nUser-agent: Python-urllib/2.0a1\r\n\r\n'
reply: 'HTTP/1.1 301 Moved\r\n'
header: Server: nginx
header: Date: Sat, 12 Jan 2013 13:31:30 GMT
header: Content-Type: text/html; charset=utf-8
header: Connection: close
header: Set-Cookie: _bit=50f165b2-002cb-01301-261cf10a;domain=.bit.ly;expires=Thu Jul 11 13:31:30 2013;path=/; HttpOnly
header: Cache-control: private; max-age=90
header: Location: http://seclists.org/fulldisclosure/2013/Jan/71?utm_source=twitterfeed&utm_medium=twitter
header: MIME-Version: 1.0
header: Content-Length: 184
connect: (seclists.org, 80)
send: 'GET /fulldisclosure/2013/Jan/71?utm_source=twitterfeed&utm_medium=twitter HTTP/1.0\r\nHost: seclists.org\r\nUser-agent: Python-urllib/2.0a1\r\n\r\n'
reply: 'HTTP/1.1 200 OK\r\n'
header: Date: Sat, 12 Jan 2013 13:31:31 GMT
header: Server: Apache/2.2.3 (CentOS)
header: Last-Modified: Sat, 12 Jan 2013 11:45:03 GMT
header: ETag: "42428b-33af-4d315f14d6dc0"
header: Accept-Ranges: bytes
header: Content-Length: 13231
header: Connection: close
header: Content-Type: text/html; charset=UTF-8
http://seclists.org/fulldisclosure/2013/Jan/71?utm_source=twitterfeed&utm_medium=twitter
bash-2.02$
}}}
pyLongURL.py will connect the short url's host with GET HTTP/1.o and then dump all of the header relplied by the server, thus connecting to the long url destination and reporting you the reply from the destination server's header accordingly.

So let's see how thing goes if you receive the spam url in twitter, i.e. the below url:
http://tinyurl.com/5twjmqp

Command line: 
{{{
bash-2.02$ python pyLongURL.py http://tinyurl.com/5twjmqp
=================================================
pyLongURL v0.1
=================================================
connect: (tinyurl.com, 80)
send: 'GET /5twjmqp HTTP/1.0\r\nHost: tinyurl.com\r\nUser-agent: Python-urllib/2.0a1\r\n\r\n'
reply: 'HTTP/1.0 302 Found\r\n'
header: X-Powered-By: PHP/5.4.9
header: Set-Cookie: tinyUUID=0f16cd59d152da6e536909cd; expires=Sun, 12-Jan-2014 14:01:52 GMT; path=/; domain=.tinyurl.com
header: Location: http://tinyurl.com/nospam.php?id=5twjmqp
header: Content-type: text/html
header: Content-Length: 0
header: Connection: close
header: Date: Sat, 12 Jan 2013 14:01:52 GMT
header: Server: TinyURL/1.6
connect: (tinyurl.com, 80)
send: 'GET /nospam.php?id=5twjmqp HTTP/1.0\r\nHost: tinyurl.com\r\nUser-agent: Python-urllib/2.0a1\r\n\r\n'
reply: 'HTTP/1.0 200 OK\r\n'
header: X-Powered-By: PHP/5.4.9
header: Set-Cookie: id=5twjmqp
header: Content-type: text/html
header: Content-Length: 3091
header: Connection: close
header: Date: Sat, 12 Jan 2013 14:01:52 GMT
header: Server: TinyURL/1.6
http://tinyurl.com/nospam.php?id=5twjmqp
}}}
Oh,  looks like the above URL already being blocked by tinyurl as spam...
Let's try the below URL:

h00p://goo.gl/XQDdx

command line:
{{{
bash-2.02$ python pyLongURL.py http://goo.gl/XQDdx
=================================================
pyLongURL v0.1
=================================================
connect: (goo.gl, 80)
send: 'GET /XQDdx HTTP/1.0\r\nHost: goo.gl\r\nUser-agent: Python-urllib/2.0a1\r\n\r\n'
reply: 'HTTP/1.0 301 Moved Permanently\r\n'
header: Content-Type: text/html; charset=UTF-8
header: Cache-Control: no-cache, no-store, max-age=0, must-revalidate
header: Pragma: no-cache
header: Expires: Fri, 01 Jan 1990 00:00:00 GMT
header: Date: Sat, 12 Jan 2013 14:07:55 GMT
header: Location: h00p://viagrasalesonline.com/
header: X-Content-Type-Options: nosniff
header: X-Frame-Options: SAMEORIGIN
header: X-XSS-Protection: 1; mode=block
header: Server: GSE
connect: (viagrasalesonline.com, 80)
send: 'GET / HTTP/1.0\r\nHost: viagrasalesonline.com\r\nUser-agent: Python-urllib/2.0a1\r\n\r\n'
reply: 'HTTP/1.1 200 OK\r\n'
header: Server: nginx
header: Date: Sat, 12 Jan 2013 14:35:47 GMT
header: Content-Type: text/html; charset=UTF-8
header: Connection: close
header: X-Powered-By: PHP/5.2.17
http://viagrasalesonline.com/
}}}
That's it. Please use it if you find it useful.

Credit: MalwareMustDie DevTeam , the G

#(Other stuffs will be added, stay tune!)